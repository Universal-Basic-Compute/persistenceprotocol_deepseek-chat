Source URL: https://nextjs.org/docs/messages/module-not-found
Extracted on: 2025-04-28T04:27:11.238602

Module Not Found | Next.jsSkip to contentSearch documentation...Search...⌘KShowcaseDocsBlogTemplatesEnterpriseSearch documentation...Search...⌘KFeedbackLearn MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.1Getting StartedInstallationProject StructureLayouts and PagesImages and FontsCSSFetching DataUpdating DataError HandlingMetadata and OG imagesDeployingUpgradingGuidesAnalyticsAuthenticationCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesInstrumentationLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingProductionPWAsSassScriptsSelf-HostingSPAsStatic ExportsTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosBuilding Your ApplicationRoutingLayouts and TemplatesLinking and NavigatingError HandlingLoading UI and StreamingRedirectingRoute GroupsDynamic RoutesParallel RoutesIntercepting RoutesRoute HandlersMiddlewareInternationalizationData FetchingData Fetching and CachingServer Actions and MutationsIncremental Static Regeneration (ISR)RenderingServer ComponentsClient ComponentsComposition PatternsPartial PrerenderingRuntimesStylingCSSTailwind CSSOptimizingImagesFontsMetadataDeep DiveCachingAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontFormImageLinkScriptFile-system conventionsdefault.jserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jspublicroute.jsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*trailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesInstrumentationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionSassScriptsSelf-HostingStatic ExportsTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingRedirectingCustom AppCustom DocumentAPI RoutesCustom ErrorsInternationalizationMiddlewareRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Edge and Node.js RuntimesData FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsIncremental Static Regeneration (ISR)Client-side FetchingStylingCSSTailwind CSSOptimizingImagesFontsConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jspublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideDocsErrorsModule Not FoundModule Not FoundWhy This Error Occurred
A module not found error can occur for many different reasons:
The module you're trying to import is not installed in your dependencies
The module you're trying to import is in a different directory
The module you're trying to import has a different casing
The module you're trying to import uses Node.js specific modules, for example dns, outside of getStaticProps / getStaticPaths / getServerSideProps
Possible Ways to Fix It
The module you're trying to import is not installed in your dependencies
When importing a module from npm this module has to be installed locally.
For example when importing the swr package:
example.jsimport useSWR from 'swr'
The swr module has to be installed using a package manager.
When using npm: npm install swr
When using yarn: yarn add swr
The module you're trying to import is in a different directory
Make sure that the path you're importing refers to the right directory and file.
The module you're trying to import has a different casing
Make sure the casing of the file is correct.
Example:
components/MyComponent.jsexport default function MyComponent() {
return <h1>Hello</h1>
}
pages/index.js// Note how `components/MyComponent` exists but `Mycomponent` without the capital `c` is imported
import MyComponent from '../components/Mycomponent'
Incorrect casing will lead to build failures on case-sensitive environments like most Linux-based continuous integration and can cause issues with Fast Refresh.
The module you're trying to import uses Node.js specific modules
getStaticProps, getStaticPaths, and getServerSideProps allow for using modules that can only run in the Node.js environment. This allows you to do direct database queries or reading data from Redis to name a few examples.
The tree shaking only runs on top level pages, so it can't be relied on in separate React components.
You can verify the tree shaking on next-code-elimination.vercel.app.
Example of correctly tree-shaken code:
lib/redis.jsimport Redis from 'ioredis'
const redis = new Redis(process.env.REDIS_URL)
export default redis
pages/index.jsimport redis from '../lib/redis'
export async function getStaticProps() {
const message = await redis.get('message')
return {
message,
}
}
export default function Home({ message }) {
return <h1>{message}</h1>
}
Example of code that would break:
lib/redis.jsimport Redis from 'ioredis'
const redis = new Redis(process.env.REDIS_URL)
export default redis
pages/index.js// Redis is a Node.js specific library that can't run in the browser
// Trying to use it in code that runs on both Node.js and the browser will result in a module not found error for modules that ioredis relies on
// If you run into such an error it's recommended to move the code to `getStaticProps` or `getServerSideProps` as those methods guarantee that the code is only run in Node.js.
import redis from '../lib/redis'
import { useEffect, useState } from 'react'
export default function Home() {
const [message, setMessage] = useState()
useEffect(() => {
redis.get('message').then((result) => {
setMessage(result)
})
}, [])
return <h1>{message}</h1>
}
Example of code that would break:
lib/redis.jsimport Redis from 'ioredis'
// Modules that hold Node.js-only code can't also export React components
// Tree shaking of getStaticProps/getStaticPaths/getServerSideProps is ran only on page files
const redis = new Redis(process.env.REDIS_URL)
export function MyComponent() {
return <h1>Hello</h1>
}
export default redis
pages/index.js// In practice you'll want to refactor the `MyComponent` to be a separate file so that tree shaking ensures that specific import is not included for the browser compilation
import redis, { MyComponent } from '../lib/redis'
export async function getStaticProps() {
const message = await redis.get('message')
return {
message,
}
}
export default function Home() {
return <MyComponent />
}Was this helpful?
supported.Send
ResourcesDocsSupport PolicyLearnShowcaseBlogTeamAnalyticsNext.js ConfPreviewsMoreNext.js CommerceContact SalesCommunityGitHubReleasesTelemetryGovernanceAbout VercelNext.js + VercelOpen Source SoftwareGitHubBlueskyXLegalPrivacy PolicyCookie PreferencesSubscribe to our newsletterStay updated on new releases and features, guides, and case studies.Subscribe© 2025 Vercel, Inc.